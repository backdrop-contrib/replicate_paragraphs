<?php
/**
 * @file
 * Main methods of Replicate paragraphs module.
 */

/**
 * Implements hook_replicate_entity_ENTITY_TYPE().
 */
function replicate_paragraphs_replicate_entity_paragraphs_item(&$entity) {
  $entity->item_id = NULL;
}

/**
 * Implements hook_replicate_field_FIELD_TYPE().
 */
function replicate_paragraphs_replicate_field_paragraphs(&$entity, $entity_type, $field_name) {
  foreach ($entity->$field_name as $langcode => $values) {
    replicate_paragraphs_clone_items($entity, $entity_type, $field_name, $langcode);
  }
}

/**
 * Replicate a paragraphs field.
 *
 * @param object $entity
 *   Entity to be modified.
 * @param string $entity_type
 *   Entity type.
 * @param string $field_name
 *   Name of the field.
 * @param string $langcode
 *   Language code of the field.
 */
function replicate_paragraphs_clone_items(&$entity, $entity_type, $field_name, $langcode = LANGUAGE_NONE) {
  // Reset the field_language static.
  // If we don't, the language returned by field_language()
  // is FALSE, resulting in the metadata-wrapper (or field_get_items())
  // to get a FALSE / an empty array,
  // which means that the fields in it won't be cloned.
  backdrop_static_reset('field_language');
  $old_items = $entity->{$field_name}[$langcode];
  if (is_null($old_items)) {
    $old_items = array();
  }
  elseif (!is_array($old_items)) {
    $old_items = array($old_items);
  }

  // Clean the previous entities from the field, so the new
  // can be saved instead.
  unset($entity->{$field_name}[$langcode]);

  foreach ($old_items as $old_item) {
    if (!empty($old_item)) {
      $old_paragraph_id = $old_item['value'];
      $old_entity = entity_load('paragraphs_item', array($old_paragraph_id));
      $new_item = replicate_clone_entity('paragraphs_item', $old_entity[$old_paragraph_id]);
      $new_item->setHostEntity($entity_type, $entity, $langcode);
      // Don't save the new paragraphs,
      // it will be saved along with the host entity.
    }
  }
}
